public with sharing class MSTR_StudentSectionAllocation_Ctrl 
{
    @AuraEnabled
    public static TermDetailsWrp getTermDetails(String recId)
    {
        Integer count = 0;
        TermDetailsWrp objTermDetailsWrp = new TermDetailsWrp();
        for(hed__Term__c objTerm : [Select Id, Name, Program_Batch__c, Program_Batch__r.Name, No_Of_Sections__c,
                                    Program_Batch__r.Provisionally_Admitted_Students__c, Program_Batch__r.Intake_Per_Section__c,
                                    Actual_Students_Per_Section__c from hed__Term__c where Id =: recId])
        {
            if(objTerm.Actual_Students_Per_Section__c == Null)
            {
                Decimal studPerSection = objTerm.Program_Batch__r.Provisionally_Admitted_Students__c / objTerm.No_Of_Sections__c;
                objTerm.Actual_Students_Per_Section__c = Math.ceil(studPerSection);
            }
            objTermDetailsWrp.objTerm = objTerm;
        }
        objTermDetailsWrp.map_allocations.put('Alphabetical Order','Alphabetical Order');
        objTermDetailsWrp.map_allocations.put('SRN Number','SRN Number');
        
        for(hed__Term__c objTerm : [Select Id, Name, Section_Name__c, Section_Number__c from hed__Term__c where 
                                    hed__Parent_Term__c =: recId AND Recordtype.Name =: Utility.Term_Object_RecType_Sections])
        {
            objTermDetailsWrp.map_Sections.put(String.valueOf(objTerm.Section_Number__c), 'Section '+objTerm.Section_Name__c);
            objTermDetailsWrp.map_TermSections.put(String.valueOf(objTerm.Section_Number__c), objTerm);
            
            SectionWrapperClass objSectWrp = new SectionWrapperClass();
            objSectWrp.sectionNo = String.valueOf(objTerm.Section_Number__c);
            objSectWrp.sectionName = 'Section '+objTerm.Section_Name__c;
            objSectWrp.sectName = objTerm.Name;
            objSectWrp.sectionId = objTerm.Id;
            objTermDetailsWrp.objSectionWrp.map_SectionWrp.put(objSectWrp.sectionNo, objSectWrp);
        }

        for(hed__Program_Enrollment__c objPrgEnroll : [Select Id, Name, hed__Contact__c, hed__Contact__r.Name, SRN_Number__c,
                                                       Type_Of_Enrollment__c, hed__Program_Plan__c, Program_Enrollment_Status__c,
                                                       hed__Program_Plan__r.SRN_Format__c, Application_Number__c, Section__c, 
                                                       Section__r.Name, Section_Number__c, hed__Contact__r.Student_Status__c from 
                                                       hed__Program_Enrollment__c where hed__Contact__r.Student_Status__c = 'Pursuing'
                                                       AND hed__Program_Plan__c =: objTermDetailsWrp.objTerm.Program_Batch__c AND
                                                       Semester__c =: recId AND Active__c =: True 
                                                       ORDER BY Section_Number__c, hed__Contact__r.Name ASC])
        {
            String strKey = String.valueOf(objPrgEnroll.Section_Number__c);

            if(objTermDetailsWrp.objSectionWrp.map_SectionWrp.get(strKey) != null)
            {
                count = count + 1;
                ProgramEnrollmentWrp objProgEnroll = getProgEnrollDetails(objPrgEnroll);
                objProgEnroll.isChecked = false;
                objTermDetailsWrp.objSectionWrp.map_SectionWrp.get(strKey).totalRecords =  objTermDetailsWrp.objSectionWrp.map_SectionWrp.get(strKey).totalRecords + 1;
                //system.debug('Section Id=='+objSectionMainWrp.map_SectionWrp.get(strKey).sectionId);
                objProgEnroll.sectionId = objTermDetailsWrp.objSectionWrp.map_SectionWrp.get(strKey).sectionId;
                objProgEnroll.oldSectionId = objTermDetailsWrp.objSectionWrp.map_SectionWrp.get(strKey).sectionId;
                objProgEnroll.sectionName = objTermDetailsWrp.objSectionWrp.map_SectionWrp.get(strKey).sectName;
                objProgEnroll.sectionNo = objTermDetailsWrp.objSectionWrp.map_SectionWrp.get(strKey).sectionNo;
                objTermDetailsWrp.objSectionWrp.map_SectionWrp.get(strKey).lstProgEnroll.add(objProgEnroll);
            }
            else
            {
                ProgramEnrollmentWrp objProgEnroll = getProgEnrollDetails(objPrgEnroll);
                objTermDetailsWrp.lstUnassigned.add(objProgEnroll);
                objTermDetailsWrp.totalUnassignedRecords = objTermDetailsWrp.totalUnassignedRecords +1;
            }
        }
        if(count > 0)
            objTermDetailsWrp.objTerm.Actual_Students_Per_Section__c = Null;
        else
        {
            objTermDetailsWrp.totalUnassignedRecords = 0;
            objTermDetailsWrp.lstUnassigned.clear();
        }
        //System.debug('Unassigned=='+objTermDetailsWrp.lstUnassigned);
        return objTermDetailsWrp;
    }
    
    /*@AuraEnabled
    public static Map<String, String> getAllocations()
    {
        Map<String, String> map_allocations = new Map<String, String>();
        map_allocations.put('Alphabetical Order','Alphabetical Order');
        map_allocations.put('SRN Number','SRN Number');
        return map_allocations;
    }*/
    
    @AuraEnabled
    public static SectionMainWrp getSectionAndStudents(hed__Term__c objTrm, String AllocationType)
    { 
        SectionMainWrp objSectionMainWrp = new SectionMainWrp();
        Map<String, SectionWrapperClass> map_SectionWrp = new Map<String, SectionWrapperClass>();
        //List<SectionWrapperClass> lstSectWrp = new List<SectionWrapperClass>();
        for(hed__Term__c objTerm : [Select Id, Name, Section_Name__c, Section_Number__c from hed__Term__c where 
                                    hed__Parent_Term__c =: objTrm.Id AND Recordtype.Name =: Utility.Term_Object_RecType_Sections])
        {
            SectionWrapperClass objSectWrp = new SectionWrapperClass();
            objSectWrp.sectionNo = String.valueOf(objTerm.Section_Number__c);
            objSectWrp.sectionName = 'Section '+objTerm.Section_Name__c;
            objSectWrp.sectName = objTerm.Name;
            objSectWrp.sectionId = objTerm.Id;
            objSectionMainWrp.map_SectionWrp.put(objSectWrp.sectionNo, objSectWrp);
            //lstSectWrp.add(objSectWrp);
        }
        
        Integer maxSize = Integer.valueOf(objTrm.Actual_Students_Per_Section__c);
        Integer studentNo = 1;
        Integer sectionNo = 1;
        //Integer Count = 0;
        if(AllocationType == 'Alphabetical Order')
        {
            for(hed__Program_Enrollment__c objPrgEnroll : [Select Id, Name, hed__Contact__c, hed__Contact__r.Name, SRN_Number__c,
                                                           Type_Of_Enrollment__c, hed__Program_Plan__c, Program_Enrollment_Status__c,
                                                           hed__Program_Plan__r.SRN_Format__c, Application_Number__c from 
                                                           hed__Program_Enrollment__c where Semester__c =: objTrm.Id AND 
                                                           hed__Program_Plan__c =: objTrm.Program_Batch__c AND Active__c =: True 
                                                           AND hed__Contact__r.Student_Status__c = 'Pursuing'
                                                           ORDER BY hed__Contact__r.Name ASC NULLS LAST])
            {
                Integer key = (studentNo <= (sectionNo*maxSize)) ? sectionNo : sectionNo+1;
                sectionNo = key;
                ProgramEnrollmentWrp objProgEnroll = getProgEnrollDetails(objPrgEnroll);
                String strKey = String.valueOf(key);
                if(objSectionMainWrp.map_SectionWrp.get(strKey) != null)
                {
                    objSectionMainWrp.map_SectionWrp.get(strKey).totalRecords =  objSectionMainWrp.map_SectionWrp.get(strKey).totalRecords + 1;
                    objProgEnroll.isChecked = true;
                    objProgEnroll.sectionId = objSectionMainWrp.map_SectionWrp.get(strKey).sectionId;
                    //objProgEnroll.oldSectionId = objSectionMainWrp.map_SectionWrp.get(strKey).sectionId;
                    objProgEnroll.sectionName = objSectionMainWrp.map_SectionWrp.get(strKey).sectName;
                    objProgEnroll.sectionNo = objSectionMainWrp.map_SectionWrp.get(strKey).sectionNo;
                    objSectionMainWrp.map_SectionWrp.get(strKey).lstProgEnroll.add(objProgEnroll);
                }
                else
                {
                    objSectionMainWrp.lstUnassigned.add(objProgEnroll);
                    objSectionMainWrp.totalUnassignedRecords = objSectionMainWrp.totalUnassignedRecords +1;
                }
                studentNo++;
            }
        }
        else if (AllocationType == 'SRN Number')
        {
            for(hed__Program_Enrollment__c objPrgEnroll : [Select Id, Name, hed__Contact__c, hed__Contact__r.Name, SRN_Number__c,
                                                           Type_Of_Enrollment__c, hed__Program_Plan__c, Application_Number__c from 
                                                           hed__Program_Enrollment__c where Semester__c =: objTrm.Id AND 
                                                           hed__Program_Plan__c =: objTrm.Program_Batch__c AND Active__c =: True
                                                           AND hed__Contact__r.Student_Status__c = 'Pursuing'
                                                           ORDER BY SRN_Number__c ASC NULLS LAST])
            {
                Integer key = (studentNo <= (sectionNo*maxSize)) ? sectionNo : sectionNo+1;
                sectionNo = key;
                ProgramEnrollmentWrp objProgEnroll = getProgEnrollDetails(objPrgEnroll);
                String strKey = String.valueOf(key);
                if(objSectionMainWrp.map_SectionWrp.get(strKey) != null)
                {
                    objSectionMainWrp.map_SectionWrp.get(strKey).totalRecords =  objSectionMainWrp.map_SectionWrp.get(strKey).totalRecords + 1;
                    objProgEnroll.isChecked = true;
                    objProgEnroll.sectionId = objSectionMainWrp.map_SectionWrp.get(strKey).sectionId;
                    //objProgEnroll.oldSectionId = objSectionMainWrp.map_SectionWrp.get(strKey).sectionId;
                    objProgEnroll.sectionName = objSectionMainWrp.map_SectionWrp.get(strKey).sectName;
                    objProgEnroll.sectionNo = objSectionMainWrp.map_SectionWrp.get(strKey).sectionNo;
                    objSectionMainWrp.map_SectionWrp.get(strKey).lstProgEnroll.add(objProgEnroll);
                }
                else
                {
                    objSectionMainWrp.lstUnassigned.add(objProgEnroll);
                    objSectionMainWrp.totalUnassignedRecords = objSectionMainWrp.totalUnassignedRecords +1;
                }
                studentNo++;
            }
        }
        //System.debug('map_SectionWrp=='+objSectionMainWrp.map_SectionWrp);
        //System.debug('lstUnassigned=='+objSectionMainWrp.lstUnassigned);
        
        return objSectionMainWrp;
    }
    
    @AuraEnabled
    public static WrapperClass createStudTermSection(String strProgrmEnroll, hed__Term__c objTrm)
    {
        WrapperClass objWrapperClass = new WrapperClass();
        try
        {
            List<Student_Semester_Mapping__c> lstStudTermMap = new List<Student_Semester_Mapping__c>();
            List<ProgramEnrollmentWrp> lstProgEnrollNew = (List<ProgramEnrollmentWrp>)JSON.deserialize(strProgrmEnroll, List<ProgramEnrollmentWrp>.class);
            String recTypeName = Utility.STM_RecType_Section;
            String recTypeId = Schema.getGlobalDescribe().get('Student_Semester_Mapping__c').getDescribe().getRecordTypeInfosByName().get(recTypeName).getRecordTypeId();
            for(ProgramEnrollmentWrp objProgEnrollWrp : lstProgEnrollNew)
            {
                Student_Semester_Mapping__c objStudTermMap = new Student_Semester_Mapping__c();
                objStudTermMap.Active__c = true;
                objStudTermMap.Program_Enrollment__c = objProgEnrollWrp.progEnrollId;
                objStudTermMap.Section__c = objProgEnrollWrp.sectionId;
                objStudTermMap.Start_Date__c = System.today();
                objStudTermMap.Name = objProgEnrollWrp.studentName+'-'+objProgEnrollWrp.sectionName;
                objStudTermMap.RecordTypeId = recTypeId;
                objStudTermMap.External_Id__c = objProgEnrollWrp.progEnrollId+'_'+objProgEnrollWrp.sectionId+'_'+System.now();
                lstStudTermMap.add(objStudTermMap);
            }
            //System.debug('lstStudTermMap=='+lstStudTermMap.Size());
            if(lstStudTermMap.size() >0)
                Database.upsert(lstStudTermMap, Student_Semester_Mapping__c.External_Id__c);
            if(objTrm != Null)
                update objTrm;
            objWrapperClass.strMessage = 'Success'; 
        }
        Catch(Exception ex)
        {
            objWrapperClass.strMessage = 'Error: '+ex.getMessage();
        }
        return objWrapperClass;
    }
    
    public static ProgramEnrollmentWrp getProgEnrollDetails(hed__Program_Enrollment__c objPrgEnroll)
    {
        ProgramEnrollmentWrp objProgEnroll = new ProgramEnrollmentWrp();
        objProgEnroll.studentName = objPrgEnroll.hed__Contact__r.Name;
        objProgEnroll.progEnrollId = objPrgEnroll.Id;
        objProgEnroll.appNumber = objPrgEnroll.Application_Number__c;
        objProgEnroll.studType = objPrgEnroll.Type_Of_Enrollment__c;
        objProgEnroll.srnNumber = objPrgEnroll.SRN_Number__c;
        objProgEnroll.contactId = objPrgEnroll.hed__Contact__c;
        objProgEnroll.progPlanId = objPrgEnroll.hed__Program_Plan__c;
        return objProgEnroll;
    }
    
    public class TermDetailsWrp
    {
        @AuraEnabled public hed__Term__c objTerm {get; set;}
        @AuraEnabled public Map<String, String> map_allocations {get; set;}
        @AuraEnabled public Map<String, String> map_Sections {get; set;}
        @AuraEnabled public Map<String, hed__Term__c> map_TermSections {get; set;}
        @AuraEnabled public SectionMainWrp objSectionWrp {get; set;}
        @AuraEnabled public List<ProgramEnrollmentWrp> lstUnassigned {get; set;}
        @AuraEnabled public Integer totalUnassignedRecords {get; set;}
        public TermDetailsWrp()
        {
            objTerm = new hed__Term__c();
            map_allocations = new Map<String, String>();
            map_Sections = new Map<String, String>();
            map_TermSections = new Map<String, hed__Term__c>();
            objSectionWrp = new SectionMainWrp();
            lstUnassigned = new List<ProgramEnrollmentWrp>();
            totalUnassignedRecords = 0;
        }
    }

    public class SectionMainWrp
    {
        @AuraEnabled public Map<String, SectionWrapperClass> map_SectionWrp {get; set;}
        @AuraEnabled public List<ProgramEnrollmentWrp> lstUnassigned {get; set;}
        @AuraEnabled public Integer totalUnassignedRecords {get; set;}
        public SectionMainWrp()
        {
            map_SectionWrp = new Map<String, SectionWrapperClass>();
            lstUnassigned = new List<ProgramEnrollmentWrp>();
            totalUnassignedRecords = 0;
        }
    }
    
    public class SectionWrapperClass
    {
        @AuraEnabled public String sectionNo {get; set;}
        @AuraEnabled public String sectionName {get; set;}
        @AuraEnabled public String sectName {get; set;}
        @AuraEnabled public String sectionId {get; set;}
        @AuraEnabled public Integer totalRecords {get; set;}
        @AuraEnabled public List<ProgramEnrollmentWrp> lstProgEnroll {get; set;}
        public SectionWrapperClass()
        {
            totalRecords = 0;
            lstProgEnroll = new List<ProgramEnrollmentWrp>();
        }
    } 
    
    public class ProgramEnrollmentWrp
    {
        @AuraEnabled public Boolean isChecked {get; set;}
        @AuraEnabled public String studentName {get; set;}
        @AuraEnabled public String progEnrollId {get; set;}
        @AuraEnabled public String appNumber {get; set;}
        @AuraEnabled public String studType {get; set;}
        @AuraEnabled public String srnNumber {get; set;}
        @AuraEnabled public String contactId {get; set;}
        @AuraEnabled public String progPlanId {get; set;}
        @AuraEnabled public String sectionId {get; set;}
        @AuraEnabled public String oldSectionId {get; set;}
        @AuraEnabled public String sectionName {get; set;}
        @AuraEnabled public String sectionNo {get; set;}
        //@AuraEnabled public Integer totalStudents {get; set;}
        //@AuraEnabled public hed__Program_Enrollment__c objProgEnroll {get; set;}
        public ProgramEnrollmentWrp()
        {
            isChecked = false;
            //slNo = 0;
            //objProgEnroll = new hed__Program_Enrollment__c();
        }   
    }
    
    public class WrapperClass
    {
        @AuraEnabled public String strMessage {get; set;}
    }
}